plugins {
    id 'application'
    id 'nebula.ospackage' version '4.0.0'
}

group = 'com.example'
version = '0.1.0'

sourceCompatibility = 1.8
mainClassName = 'com.example.myproject.HelloWorld'

sourceSets {
    examples
    main
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

run {
    jvmArgs = ["-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"]
}

repositories {
    mavenLocal()
    mavenCentral()
}

configurations {
    runtime.exclude group: "org.slf4j", module: "slf4j-log4j12"
}

dependencies {
    compile 'com.typesafe:config:1.3.0'
    compile 'io.dropwizard.metrics:metrics-core:3.2.2'
    compile 'io.dropwizard.metrics:metrics-graphite:3.2.2'
    compile('io.github.hengyunabc:zabbix-sender:0.0.3') {
        exclude group: 'ch.qos.logback'
    }
    compile 'org.apache.kafka:kafka-streams:0.10.1.1'
    compile 'org.apache.logging.log4j:log4j-api:2.6.2'
    compile 'org.apache.logging.log4j:log4j-core:2.6.2'
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.6.2'
    compile 'org.apache.thrift:libthrift:0.9.3'
    examplesCompile 'com.typesafe:config:1.3.0'
    examplesCompile 'io.dropwizard.metrics:metrics-core:3.2.2'
    examplesCompile 'io.dropwizard.metrics:metrics-graphite:3.2.2'
    examplesCompile('io.github.hengyunabc:zabbix-sender:0.0.3') {
        exclude group: 'ch.qos.logback'
    }
    examplesCompile 'org.apache.kafka:kafka-streams:0.10.1.1'
    examplesCompile 'org.apache.logging.log4j:log4j-api:2.6.2'
    examplesCompile 'org.apache.logging.log4j:log4j-core:2.6.2'
    examplesCompile 'org.apache.thrift:libthrift:0.9.3'
    testCompile 'junit:junit:4.12'
    testCompile 'org.apache.kafka:kafka-streams:0.10.1.1:test'
    testCompile 'org.apache.kafka:kafka-clients:0.10.1.1:test'
    testCompile 'org.mockito:mockito-core:1.+'
}

ospackage {
    os = 'LINUX'
    user = 'root'

    def commitCount = 'git rev-list --count HEAD'.execute().text.trim()
    def buildNumber = System.env.BUILD_NUMBER ?: '0'
    release = "${commitCount}_${buildNumber}"

    requires('jdk', '1.8.0_45', GREATER | EQUAL)
}

task createRpm(type: Rpm) {
    packageName 'myproject'

	// specify the individual app names here is building multiple
	// applications from a single project
    def apps = ["${packageName}"]

    // copy the dependency JARs
    from(configurations.runtime) {
        into "/usr/share/${packageName}/lib"
    }

    // copy this project's JAR
    from(jar.outputs.files) {
        into "/usr/share/${packageName}/lib"
    }

    for (app in apps) {
        // copy configuration files
        from('src/main/resources/application.conf') {
            fileType CONFIG | NOREPLACE
            into "/etc/${app}"
        }

        // copy the JVM config
        from("rpm/java_opts/${app}") {
            into "/etc/default"
            fileMode 0644
        }

        // copy the init script
        from("rpm/init/${app}") {
            into "/etc/init.d"
            fileMode 0755
        }

        // copy the bin script (called by init script)
        from("rpm/bin/${app}") {
            into "/usr/share/${packageName}/bin"
            fileMode 0755
        }

        // create a link in /usr/bin
        link("/usr/bin/${app}", "/usr/share/${packageName}/bin/${app}", 0777)

        // create the PID directory
        directory("/var/run/${app}", 0755)

        // create the log directory
        directory("/var/log/${app}", 0755)

        // link the log directory
        link("/usr/share/${packageName}/logs/${app}", "/var/log/${app}", 0777)
    }
}

// used by Makefile
task printVersion {
    doLast {
        println project.version
    }
}

task runLocal(type: JavaExec) {
    main = "com.example.myproject.HelloWorld"
    systemProperty "kafka.streams.bootstrap.servers", System.getProperty("kafka.streams.bootstrap.servers", "172.16.21.150:9092")
    systemProperty "kafka.streams.zookeeper.connect", System.getProperty("kafka.streams.zookeeper.connect", "172.16.21.150:9092")
    classpath = sourceSets.main.runtimeClasspath
}

task runTestProducer(type: JavaExec) {
    main = "com.example.myproject.producers.HelloWorldTestProducer"
    systemProperty "kafka.streams.bootstrap.servers", System.getProperty("kafka.streams.bootstrap.servers", "172.16.21.150:9092")
    systemProperty "kafka.streams.zookeeper.connect", System.getProperty("kafka.streams.zookeeper.connect", "172.16.21.150:9092")
    systemProperty "test.producer.delay", System.getProperty("test.producer.delay", "100")
    systemProperty "test.producer.iterations", System.getProperty("test.producer.iterations", "20")
    systemProperty "test.producer.iteration.size", System.getProperty("test.producer.iteration.size", "10")
    classpath = sourceSets.examples.runtimeClasspath
}


